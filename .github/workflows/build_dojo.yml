name: BuildDojo

on:
  workflow_call:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: '0.0.0'
        type: string
    # secrets:
    #   my_secret:
    #     required: true

jobs:
    create_linux_files:
        runs-on: ubuntu-20.04
        strategy:
          matrix:
            python-version: ['3.10', '3.11', '3.12']
    
        steps:
        - uses: actions/checkout@v2
    
        - name: Authenticate to Google Cloud
          id: auth
          uses: google-github-actions/auth@v2
          with:
            project_id: "dojo-405216"
            workload_identity_provider: "projects/557429359617/locations/global/workloadIdentityPools/github/providers/dojo-ci"
            service_account: "github-dojo-ci@dojo-405216.iam.gserviceaccount.com"
    
        - name: Retrieve secrets from GCP Secrets Manager
          id: get-secrets
          uses: google-github-actions/get-secretmanager-secrets@v2
          with:
            secrets: |
              NODE_API_KEY: projects/557429359617/secrets/node_api_key_secret
              NODE_RPC_URL: projects/557429359617/secrets/node_rpc_url_secret
    
        - name: Set up environment variable
          run: echo "RPC_URL=https://${{ steps.get-secrets.outputs.NODE_RPC_URL}}?key=${{ steps.get-secrets.outputs.NODE_API_KEY }}" >> $GITHUB_ENV
    
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        
    
        - name: Use the Version Variable
          run: |
            echo "The project version is ${{ inputs.tag }}""
    
        - name: Install poetry dependencies
          run: |
            curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
            poetry install
        - name: Build dist
          run: |
            poetry run python setup.py build_ext --inplace
            poetry build
        - name: Setup customer dir
          run: |
            cd ..
            rm -rf dojo-customer
            mkdir dojo-customer
            cd dojo-customer || exit
    
        - name: Install Foundry
          uses: foundry-rs/foundry-toolchain@v1
          with:
            version: nightly-de33b6af53005037b463318d2628b5cfcaf39916 
          
        - name: Install .tar.gz package
          run: |
            python3 -m pip uninstall dojo-compass -y
            python3 -m pip install dist/dojo_compass-${{ inputs.tag }}.tar.gz
        - name: Install .whl package
          run: |
            python3 -m pip uninstall dojo-compass -y
            python3 -m pip install dist/dojo_compass-${{ inputs.tag }}-py3-none-any.whl
    
        - name: Upload dist artifacts
          uses: actions/upload-artifact@v2
          with:
            name: dist-linux-${{ matrix.python-version }}
            path: dist
    

    create_macos_14_files:
        runs-on: macos-14
        strategy:
          matrix:
            python-version: ['3.10', '3.11', '3.12']
    
        steps:
        - uses: actions/checkout@v2
    
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        
        # - name: Extract version from pyproject.toml
        #   run: |
        #     VERSION=$(awk -F'"' '/^version =/ {print $2}' pyproject.toml)
        #     echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
    
        - name: Use the Version Variable
          run: |
            echo "The project version is ${{ inputs.tag }}"
    
        - name: Install poetry dependencies
          run: |
            curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
            # export PATH="/Users/runner/.local/bin:$PATH"
            /Users/runner/.local/bin/poetry install
        - name: Build dist
          run: |
            /Users/runner/.local/bin/poetry run python setup.py build_ext --inplace
            /Users/runner/.local/bin/poetry build
        - name: Setup customer dir
          run: |
            cd ..
            rm -rf dojo-customer
            mkdir dojo-customer
            cd dojo-customer || exit
            
        - name: Install Foundry
          uses: foundry-rs/foundry-toolchain@v1
          with:
            version: nightly-de33b6af53005037b463318d2628b5cfcaf39916 
    
        - name: Install .tar.gz package
          run: |
            python3 -m pip uninstall dojo-compass -y
            python3 -m pip install dist/dojo_compass-${{ inputs.tag }}.tar.gz
    
    
    
        - name: List all files in dist
          run: |
            ls dist
    
        - name: Upload dist artifacts
          uses: actions/upload-artifact@v2
          with:
            name: dist-macos-14-${{ matrix.python-version }}
            path: dist
    
    
    combine_versions:
        runs-on: ubuntu-latest
    
        needs: [create_linux_files, create_macos_14_files]
    
        steps:
          - name: Checkout code
            uses: actions/checkout@v2
    
        #   - name: Extract version from pyproject.toml
        #     run: |
        #       VERSION=$(awk -F'"' '/^version =/ {print $2}' pyproject.toml)
        #       echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
    
          - name: Download output files linux-3.10
            uses: actions/download-artifact@v2
            with:
              name: dist-linux-3.10
              path: dist-linux-3.10
    
          - name: Download output files linux-3.11
            uses: actions/download-artifact@v2
            with:
              name: dist-linux-3.11
              path: dist-linux-3.11
    
    
          - name: Download output files linux-3.12
            uses: actions/download-artifact@v2
            with:
              name: dist-linux-3.12
              path: dist-linux-3.12
    
          - name: Download output files macos-14-3.10
            uses: actions/download-artifact@v2
            with:
              name: dist-macos-14-3.10
              path: dist-macos-14-3.10
    
          - name: Download output files macos-14-3.11
            uses: actions/download-artifact@v2
            with:
              name: dist-macos-14-3.11
              path: dist-macos-14-3.11
    
          - name: Download output files macos-14-3.12
            uses: actions/download-artifact@v2
            with:
              name: dist-macos-14-3.12
              path: dist-macos-14-3.12
            
    
          - name: LS
            run: |
              ls .
    
          - name: LS DIST
            run: |
              ls dist-linux-3.10
    
          - name: Untar into dist directory
            run: |
              mkdir dist
              tar -xf dist-linux-3.10/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              tar -xf dist-linux-3.11/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              tar -xf dist-linux-3.12/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              # tar -xf dist-macos-13-3.10/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              # tar -xf dist-macos-13-3.11/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              tar -xf dist-macos-14-3.10/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              tar -xf dist-macos-14-3.11/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
              tar -xf dist-macos-14-3.12/dojo_compass-"${{ inputs.tag }}".tar.gz -C dist
    
          - name: Rezip contents
            run: |
              cd dist
              ls .
              tar -czf dojo_compass-${{ inputs.tag }}}.tar.gz dojo_compass-${{ inputs.tag }}
              rm -rf dojo_compass-${{ inputs.tag }}/
              # zip -q -r dojo_compass-${{ inputs.tag }}-py3-none-any.whl dojo dojo_compass dojo_compass-${{ inputs.tag }}.dist-info
              cd ..
    
          - name: Upload dist artifacts
            uses: actions/upload-artifact@v4
            with:
              name: dist
              path: dist
    
          - name: Upload tests folder
            uses: actions/upload-artifact@v4
            with:
              name: tests
              path: tests
    
          - name: Upload demo folder
            uses: actions/upload-artifact@v4
            with:
              name: demo
              path: demo

    store_on_gcp:
        runs-on: ubuntu-latest
        needs: combine_versions
    
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v2
    
        #   - name: Extract version from pyproject.toml
        #     run: |
        #       VERSION=$(awk -F'"' '/^version =/ {print $2}' pyproject.toml)
        #       echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
    
          - name: Download dist folder
            uses: actions/download-artifact@v4
            with:
              name: dist
              path: dist
    
    
          - name: Download tests folder
            uses: actions/download-artifact@v4
            with:
              name: tests
              path: tests
    
    
          - name: Download demo folder
            uses: actions/download-artifact@v4
            with:
              name: demo
              path: demo
    
          - name: Create release folder
            run: |
              mkdir release-${{ inputs.tag }}
              mv demo release-${{ inputs.tag }}/
              mv tests release-${{ inputs.tag }}/
              mv dist/* release-${{ inputs.tag }}/
    
    
          - name: Print keyfile
            run: |
              echo "${{ secrets.GCP_CREDENTIALS }}"
    
          - id: 'auth'
            uses: 'google-github-actions/auth@v2'
            with:
              credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
          - name: Upload Artifacts to GCS
            run: |
              # Set up GCP credentials
              # echo "$GCP_SA_KEY" > gcp-key.json
              gcloud auth activate-service-account --key-file=.github/workflows/keyfile.json
    
              # Upload artifacts to GCS bucket
              gsutil cp -r release-${{ inputs.tag }} gs://dojo_compass_cicd
              # gsutil cp -r demo gs://dojo_compass_cicd
              # gsutil cp -r tests gs://dojo_compass_cicd
            # env:
            #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}